#!/usr/bin/env bash

function error {
  echo ERROR : $*
  exit 1
}

if [ ! -f $KRAKEN/.kraken-root ]; then
  error "\$KRAKEN must point to root of Kraken repository."
fi

KBASE=$KRAKEN/compiler/kernel-template
KBIN=$KRAKEN/compiler/bin

function canonpath {
  echo $(cd $(dirname $1); pwd -P)/$(basename $1)
}

# default arguments
OUTDIR="."
BUILD=false
FORCE=false
PRETTY=false
INPUT=""

function usage {
  echo "
Usage: kraken.sh [options] input.krn

Generate Coq kernel and client libraries from a Kraken spec.

OPTIONS:
  -h, --help          print this usage information
  -o, --outdir DIR    generate output in DIR
  -b, --build         build generated kernel
  -f, --force         overwrite existing output
  -p, --pretty        prettify generated Coq code (requires ProofGeneral)
"
  exit 1
}

# process args
if [ "$*" = "" ]; then
  usage
fi
while [ "$*" != "" ]; do
  case $1 in
    -h | -help | --help)
      usage
      ;;
    -o | --outdir)
      shift
      OUTDIR=$1
      ;;
    -b | --build)
      BUILD=true
      ;;
    -f | --force)
      FORCE=true
      ;;
    -p | --pretty)
      PRETTY=true
      ;;
    *.krn)
      INPUT=$1
      ;;
    *)
      echo "Unrecognized option '$1'"
      usage
      ;;
  esac
  shift
done

if [ ! -f "$INPUT" ]; then
  error "cannot find input '$INPUT'"
fi
INPUT=$(canonpath "$INPUT")

if [ ! -d "$OUTDIR" ]; then
  error "cannot generate output in '$OUTDIR'"
fi

# setup kernel tree dir
D="$OUTDIR/$(basename $INPUT .krn)"
if [ -d "$D" ]; then
  if $FORCE; then
    if [ -f "$D/.kraken-generated" ]; then
      rm -rf "$D"
    else
      error "'$D' was not generated by Kraken. Overwrite via --force failed."
    fi
  else
    error "'$D' already exists. To overwrite use --force."
  fi
fi
D=$(canonpath "$D")

# copy template to kernel tree
cp -r "$KBASE" "$D"

# generate code and proofs
$KBIN/.kraken $INPUT \
  --exchange "$D/coq/Exchange.v" \
  --lib "$D/client" \
|| error "Kraken compiler failed."

# tell Makefile where it lives
echo "
# path to root of generated kernel
KROOT := "$D"
" >> "$D/Makefile.config"

# tell kernel.sh where it lives
sed "s;__KROOT__;$D;" \
  < "$KBASE/bin/kernel.sh" \
  > "$D/bin/kernel.sh"

# make scripts executable
chmod +x "$D/bin/kernel.sh"
chmod +x "$D/client/test.py"

if $PRETTY; then
  $KBIN/coq-prettify.sh "$D/coq/Exchange.v"
fi

if $BUILD; then
  echo
  echo ">>> BUILDING $D <<<"
  echo
  make -C "$D"
fi
