#!/usr/bin/env bash

function error {
  echo ERROR : $*
  exit 1
}

if [ ! -f $KRAKEN/.kraken-root ]; then
  error "\$KRAKEN must point to root of Kraken repository."
fi

KBASE=$KRAKEN/compiler/kernel-template
KBIN=$KRAKEN/compiler/bin

function canonpath {
  echo $(cd $(dirname $1); pwd -P)/$(basename $1)
}

# default arguments
OUTDIR="."
BUILD=false
FORCE=false
PRETTY=false
DEBUG=false
INDIR=""

function usage {
  echo "
Usage: kraken.sh [options] <input-dir>

Generate Coq kernel and client libraries from a Kraken spec.

<input-dir> should contain a Kraken spec 'kernel.krn' which will be used to
generate the kernel. Any client scripts in <input-dir> will be copied into
the client dir of the generated kernel.

OPTIONS:
  -h, --help          print this usage information
  -o, --outdir DIR    generate output in DIR
  -b, --build         build generated kernel
  -f, --force         overwrite existing output
  -p, --pretty        prettify generated Coq code (requires ProofGeneral)
  -d, --debug         trace script and start Kraken in debugger
"
  exit 1
}

# process args
if [ $# -eq 0 ]; then
  usage
fi
while [ $# -ne 0 ]; do
  case $1 in
    -h | -help | --help)
      usage
      ;;
    -o | --outdir)
      shift
      OUTDIR=$1
      ;;
    -b | --build)
      BUILD=true
      ;;
    -f | --force)
      FORCE=true
      ;;
    -p | --pretty)
      PRETTY=true
      ;;
    -d | --debug)
      DEBUG=true
      ;;
    *)
      INDIR=$1
      ;;
  esac
  shift
done

if $DEBUG; then
  # echo commands as we run them
  set -x
fi

if [ ! -d "$INDIR" ]; then
  error "cannot find input dir '$INDIR'"
fi

if [ ! -f "$INDIR/kernel.krn" ]; then
  error "cannot find kernel spec '$INDIR/kernel.krn'"
fi

if [ ! -d "$OUTDIR" ]; then
  error "cannot generate output in '$OUTDIR'"
fi

INDIR=$(canonpath "$INDIR")

# setup kernel tree dir
D="$OUTDIR/$(basename $INDIR)"
if [ -d "$D" ]; then
  if $FORCE; then
    if [ -f "$D/.kraken-generated" ]; then
      rm -rf "$D"
    else
      error "'$D' was not generated by Kraken. Overwrite via --force failed."
    fi
  else
    error "'$D' already exists. To overwrite use --force."
  fi
fi
D=$(canonpath "$D")

# copy template to kernel tree, install client code
cp -r "$KBASE" "$D"
cp $INDIR/* $D/client/

# generate code and proofs
EXEC="$KBIN/.kraken"
if $DEBUG; then
  EXEC="ocamldebug -I $KRAKEN/compiler/src/_build $EXEC"
fi
$EXEC $INDIR/kernel.krn \
  --template kernel "$D/coq/Kernel.v-template" \
  --instance kernel "$D/coq/Kernel.v" \
  || error "Kraken compiler failed."

# tell Makefile where it lives
echo "
# path to root of generated kernel
KROOT := "$D"
" >> "$D/Makefile.config"

# tell kernel.sh where it lives
sed "s;__KROOT__;$D;" \
  < "$KBASE/bin/kernel.sh" \
  > "$D/bin/kernel.sh"

if $PRETTY; then
  $KBIN/coq-prettify.sh "$D/coq/Kraken.v"
fi

if $BUILD; then
  echo
  echo ">>> BUILDING $D <<<"
  echo
  make -C "$D"
fi
