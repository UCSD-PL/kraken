#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <stdint.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <assert.h>

#define TRUE     1
#define FALSE    0
#define NUM_SIZE 1

// cmsg size for 1 file descriptor
#define FD_CMSG_SPACE CMSG_SPACE(sizeof(int))

// global socket for all kernel communication
int KCHAN;

// Programs using this lib should be forked from a Kraken kernel which will
// set up a socket for communication and pass it to the child as a command
// line argument in the exec. msg_init(arg) takes that argument, makes it a
// socket, and stores it in KCHAN.
void msg_init(char *arg);

typedef enum param_t {
  PTYP_NUM,
  PTYP_STR,
  PTYP_FD,
} param_t;

typedef struct pstr {
  uint32_t len;
  char *buf;
} pstr;

typedef union param_v {
  uint32_t num;
  pstr *pstr;
  int fd;
} param_v;

typedef struct param {
  param_t ptyp;
  param_v pval;
  struct param *next;
} param;

typedef enum msg_t {
__MSG_T_CASES__
} msg_t;

typedef struct msg {
  msg_t mtyp;
  param *payload;
} msg;

pstr * pstr_of_string(char *s);

pstr * mk_pstr(int len, char *buf);

pstr * pstrdup(pstr *s);

// allocate various kinds of msgs

__MK_MSG_PROTOTYPES__

// free all resources tied to this message
void free_msg(msg *m);

// get the ith param of a msg
param * get_param(msg *m, int i);

// return a nice string representation of msg m
// caller is responsible for freeing the returned string
char * string_of_msg(msg *m);

msg * recv_msg(void);

void send_msg(msg *m);
