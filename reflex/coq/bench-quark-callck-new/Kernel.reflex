Components :
  UserInput "../test/quark/input/run.sh"     () ()
  Output    "../test/quark/output/output.sh" () ()
  Tab       "../test/quark/tab/tab.sh"       () (id:str, domain:str)
  CProc     "../test/quark/cookie/cookie.py" () (domain:str)

Messages :
  TabCreate(str, str)
  TabSwitch(str)
  Navigate(str)
  KeyPress(str)
  MouseClick(str)
  AddrAdd(str, str)
  RenderCompleted(str)
  RenderRequest(str)
  URLRequest(str)
  URLResponse(fd)
  SocketRequest(str)
  SocketResponse(fd)
  TabProcessRegister(fd)
  CookieProcessRegister(fd)
  AddrFocus(str)
  DomainSet(str)

State :
  CurTab : str

Operations :
  Misc.dom : str -> str -> str

Init :
  Out <- spawn Output();
  User <- spawn UserInput()

Handlers :
  When u:UserInput sends TabCreate(id, domain) respond:
    lookup Tab(id, _)
    { t => nop }
    { t <- spawn Tab(id, domain);
      send(t, DomainSet(domain));
      f <- call "create_ckchan.py"();
      send(t, CookieProcessRegister(f));
      lookup CProc(domain)
      { cp => send(cp, TabProcessRegister(f)) }
      { c <- spawn CProc(domain);
        send(c, TabProcessRegister(f))
      };
      CurTab <- id;
      lookup UserInput()
      { u => send(u, AddrAdd(id, domain)) }
      { nop }
    }

  When u:UserInput sends TabSwitch(id) respond:
    lookup Tab(id, _)
    { t => CurTab <- id;
           lookup UserInput()
           { u => send(u, AddrFocus(id));
                  send(t, RenderRequest("")) }
           { nop }
    }
    { nop }

  When u:UserInput sends Navigate(url) respond:
    lookup Tab(CurTab, _)
    { t => if ((dom "/" url) == t.domain)
           then send(t, Navigate(url))
           else nop }
    { nop }

  When u:UserInput sends KeyPress(key) respond:
    lookup Tab(CurTab, _)
    { t => send(t, KeyPress(key)) }
    { nop }

  When u:UserInput sends MouseClick(coord) respond:
    lookup Tab(CurTab, _)
    { t => send(t, MouseClick(coord)) }
    { nop }

  When t:Tab sends RenderCompleted(key) respond:
    if (t.id == CurTab)
    then lookup Output()
         { o => send(o, RenderCompleted(key)) }
         { nop }
    else nop

  When t:Tab sends URLRequest(url) respond:
    f <- call "../test/quark/common/pywget.py"(url);
    send(t, URLResponse(f))

  When t:Tab sends SocketRequest(url) respond:
    dom_ok <- invokestr "dom_ok" (url, t.domain);
    if (dom_ok == "")
    then f <- invokefd "create_socket" (url);
         send(t, SocketResponse(f))
    else nop

Properties :
  CProcUnique:
    forall d:
      [Spawn CProc(d)] Disables [Spawn CProc(d)]

  CookieSameDomainEnables:
    forall d, f:
      [Send(Tab(_, d), CookieProcessRegister(f))]
      Enables
      [Send(CProc(d), TabProcessRegister(f))]

  CookieSameDomainImmAfter:
    forall f:
      [Send(Tab(_, _), CookieProcessRegister(f))]
      ImmAfter
      [Call "create_ckchan.py" () f]

  CookieSameDomainEnsures:
    forall d, f:
      [Send(Tab(_, d), CookieProcessRegister(f))]
      Ensures
      [Send(CProc(d), TabProcessRegister(f))]

  SocketCreateBeforeSend:
    forall f:
      [InvokeFD "create_socket" (_) f]
      ImmBefore
      [Send(Tab(_, _), SocketResponse(f))]

  SocketDomOkBeforeCreate:
    forall url:
      [InvokeStr "dom_ok" (url, _) ""]
      ImmBefore
      [InvokeFD "create_socket" (url) _]

  SocketRequestBeforeDomOk:
    forall d, url:
      [Recv(Tab(_, d), SocketRequest(url))]
      ImmBefore
      [InvokeStr "dom_ok" (url, d) _]

  TabIdUnique:
    forall id:
      [Spawn Tab(id, _)] Disables [Spawn Tab(id, _)]

  DomainNonInterference:
    forall d:
      NoInterfere
        HighComps : Tab(_, d), CProc(d), UserInput()
        HighVars : CurTab
        HighCompList : Tab(_, _), UserInput(), Output()
