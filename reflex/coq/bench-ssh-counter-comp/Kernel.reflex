Components :
  System  "/home/don/kraken/kraken/ssh-proto/kmsg-ssh/sshd_sys" () ()
  Slave   "/home/don/kraken/kraken/ssh-proto/kmsg-ssh/ssh"      () ()
  Counter "/home/don/kraken/kraken/ssh-proto/counter.py"        () ()

Messages :
  LoginReq(str)
  LoginResT()
  LoginResF()
  PubkeyReq()
  PubkeyRes(str)
  KeysignReq(str)
  KeysignRes(str)
  CreatePtyerReq()
  CreatePtyerRes(fd, fd)
  SLoginReq(str)
  SLoginResT(str)
  SLoginResF()
  SPubkeyReq()
  SPubkeyRes(str)
  SKeysignReq(str)
  SKeysignRes(str)
  SCreatePtyerReq(str)
  SCreatePtyerRes(fd, fd)
  CLoginReq(str)
  CLoginResT(str)
  CLoginResF(str)

State :
  authenticated : num
  user          : str

Operations :
  Misc.str_prefix : str -> str -> num

Init :
  Sys <- spawn System();
  Slv <- spawn Slave();
  Cnt <- spawn Counter()

Handlers :
  When slv:Slave sends LoginReq(u) respond:
    lookup Counter()
    { c => send(c, CLoginReq(u)) }
    { nop }

  When cnt:Counter sends CLoginResT(u) respond:
    lookup System()
    { s => send(s, SLoginReq(u)) }
    { nop }

  When sys:System sends SLoginResT(u) respond:
    user <- u;
    authenticated <- 1;
    lookup Slave()
    { s => send(s, LoginResT()) }
    { nop }

  When sys:System sends SLoginResF() respond:
    lookup Slave()
    { s => send(s, LoginResF()) }
    { nop }

  When slv:Slave sends PubkeyReq() respond:
    lookup System()
    { s => send(s, SPubkeyReq()) }
    { nop }

  When sys:System sends SPubkeyRes(key) respond:
    lookup Slave()
    { s => send(s, PubkeyRes(key)) }
    { nop }

  When slv:Slave sends KeysignReq(key) respond:
    lookup System()
    { s => send(s, SKeysignReq(key)) }
    { nop }

  When sys:System sends SKeysignRes(key) respond:
    lookup Slave()
    { s => send(s, KeysignRes(key)) }
    { nop }

  When slv:Slave sends CreatePtyerReq() respond:
    if (authenticated == 0)
    then nop
    else lookup System()
         { s => send(s, SCreatePtyerReq(user)) }
         { nop }

  When sys:System sends SCreatePtyerRes(f1, f2) respond:
    lookup Slave()
    { s => send(s, CreatePtyerRes(f1, f2)) }
    { nop }

Properties :
  CounterObeyed:
    forall u:
      [Recv(Counter(), CLoginResT(u))]
      ImmBefore
      [Send(_, SLoginReq(u))]

  LoginEnablesPTY:
    forall u:
      [Recv(System(), SLoginResT(u))]
      Enables
      [Send(_, SCreatePtyerReq(u))]