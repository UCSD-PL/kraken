open BinNat
open BinPos
open Datatypes

type __ = Obj.t

module RingSyntax : 
 sig 
  
 end

val pow_pos : ('a1 -> 'a1 -> 'a1) -> 'a1 -> positive -> 'a1

val pow_N : 'a1 -> ('a1 -> 'a1 -> 'a1) -> 'a1 -> coq_N -> 'a1

val id_phi_N : coq_N -> coq_N

val semi_ring_theory_rect :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> (__ -> __ -> __
  -> __ -> __ -> __ -> __ -> __ -> 'a2) -> 'a2

val semi_ring_theory_rec :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> (__ -> __ -> __
  -> __ -> __ -> __ -> __ -> __ -> 'a2) -> 'a2

val almost_ring_theory_rect :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 ->
  'a1) -> ('a1 -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> __ -> __ -> __ -> __
  -> __ -> __ -> 'a2) -> 'a2

val almost_ring_theory_rec :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 ->
  'a1) -> ('a1 -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> __ -> __ -> __ -> __
  -> __ -> __ -> 'a2) -> 'a2

val ring_theory_rect :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 ->
  'a1) -> ('a1 -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> __ -> __ -> __ -> __
  -> 'a2) -> 'a2

val ring_theory_rec :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 ->
  'a1) -> ('a1 -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> __ -> __ -> __ -> __
  -> 'a2) -> 'a2

val sring_eq_ext_rect :
  ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> (__ -> __ -> 'a2) -> 'a2

val sring_eq_ext_rec :
  ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> (__ -> __ -> 'a2) -> 'a2

val ring_eq_ext_rect :
  ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1) -> (__ -> __ ->
  __ -> 'a2) -> 'a2

val ring_eq_ext_rec :
  ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1) -> (__ -> __ ->
  __ -> 'a2) -> 'a2

val semi_morph_rect :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> 'a2 -> 'a2 ->
  ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 -> bool) -> ('a2
  -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> 'a3) -> 'a3

val semi_morph_rec :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> 'a2 -> 'a2 ->
  ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 -> bool) -> ('a2
  -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> 'a3) -> 'a3

val ring_morph_rect :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 ->
  'a1) -> ('a1 -> 'a1) -> 'a2 -> 'a2 -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 ->
  'a2) -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2) -> ('a2 -> 'a2 -> bool) -> ('a2
  -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> __ -> __ -> 'a3) -> 'a3

val ring_morph_rec :
  'a1 -> 'a1 -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 -> 'a1) -> ('a1 -> 'a1 ->
  'a1) -> ('a1 -> 'a1) -> 'a2 -> 'a2 -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 ->
  'a2) -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2) -> ('a2 -> 'a2 -> bool) -> ('a2
  -> 'a1) -> (__ -> __ -> __ -> __ -> __ -> __ -> __ -> 'a3) -> 'a3

val sign_theory_rect :
  ('a1 -> 'a1) -> ('a1 -> 'a1 -> bool) -> ('a1 -> 'a1 option) -> (__ -> 'a2)
  -> 'a2

val sign_theory_rec :
  ('a1 -> 'a1) -> ('a1 -> 'a1 -> bool) -> ('a1 -> 'a1 option) -> (__ -> 'a2)
  -> 'a2

val get_sign_None : 'a1 -> 'a1 option

val div_theory_rect :
  ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a1) -> ('a2 -> 'a2
  -> ('a2, 'a2) prod) -> (__ -> 'a3) -> 'a3

val div_theory_rec :
  ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a2 -> 'a2) -> ('a2 -> 'a1) -> ('a2 -> 'a2
  -> ('a2, 'a2) prod) -> (__ -> 'a3) -> 'a3

val coq_IDphi : 'a1 -> 'a1

val power_theory_rect :
  'a1 -> ('a1 -> 'a1 -> 'a1) -> (coq_N -> 'a2) -> ('a1 -> 'a2 -> 'a1) -> (__
  -> 'a3) -> 'a3

val power_theory_rec :
  'a1 -> ('a1 -> 'a1 -> 'a1) -> (coq_N -> 'a2) -> ('a1 -> 'a2 -> 'a1) -> (__
  -> 'a3) -> 'a3

val coq_SRopp : 'a1 -> 'a1

val coq_SRsub : ('a1 -> 'a1 -> 'a1) -> 'a1 -> 'a1 -> 'a1

type ring_kind =
| Abstract
| Computational of (__ -> __ -> bool)
| Morphism of __ * __ * (__ -> __ -> __) * (__ -> __ -> __)
   * (__ -> __ -> __) * (__ -> __) * __ * __ * (__ -> __ -> __)
   * (__ -> __ -> __) * (__ -> __ -> __) * (__ -> __) * (__ -> __ -> bool)
   * (__ -> __)

val ring_kind_rect :
  'a1 -> (__ -> __ -> (__ -> __ -> bool) -> __ -> 'a1) -> (__ -> __ -> __ ->
  (__ -> __ -> __) -> (__ -> __ -> __) -> (__ -> __ -> __) -> (__ -> __) ->
  __ -> __ -> __ -> __ -> (__ -> __ -> __) -> (__ -> __ -> __) -> (__ -> __
  -> __) -> (__ -> __) -> (__ -> __ -> bool) -> (__ -> __) -> __ -> 'a1) ->
  ring_kind -> 'a1

val ring_kind_rec :
  'a1 -> (__ -> __ -> (__ -> __ -> bool) -> __ -> 'a1) -> (__ -> __ -> __ ->
  (__ -> __ -> __) -> (__ -> __ -> __) -> (__ -> __ -> __) -> (__ -> __) ->
  __ -> __ -> __ -> __ -> (__ -> __ -> __) -> (__ -> __ -> __) -> (__ -> __
  -> __) -> (__ -> __) -> (__ -> __ -> bool) -> (__ -> __) -> __ -> 'a1) ->
  ring_kind -> 'a1

